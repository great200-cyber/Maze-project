THE MAZE PROJECT - MVP
(A 3D Game created using SDL2)

Minimum Viable Product (MVP) for the Maze Game with SDL2:


Explanation:
Walls: Create a 2D array to represent the maze and draw walls using SDL2 graphics library. The walls should be represented by rectangles or lines.
Define a 2D array to store the maze data.
Use SDL2 graphics library to draw walls by rendering rectangles or lines.
Orientation: Use the arrow keys to control the movement and rotation of the player in the maze. You can use SDL_Event to handle user input.
Implement a function to handle user input using SDL_Event.
Update the player's position and orientation based on the input received from the user.
Move: Implement basic movement logic for the player. Allow the player to move forward, backward, left, and right in the maze.
Implement a function to update the player's position based on the current orientation and input received from the user.
Ouch: Add collision detection between the player and the walls. The player should not be able to move through the walls. If the player collides with a wall, stop the player's movement.
Implement a function to check for collision between the player and the walls.
If the player collides with a wall, stop the player's movement.
Parser: Create a simple parser to read the maze data from a text file and store it in a 2D array.
Implement a function to read the maze data from a text file.
Store the maze data in the 2D array.
Draw the Map: Draw the maze using the maze data stored in the 2D array. You can use different colors for the walls and ground/ceiling to make them visually distinct.
Use the maze data stored in the 2D array to draw the maze.
Use different colors to distinguish between the walls and ground/ceiling.
Textures: Add basic textures to the walls using SDL2's texture rendering functions.
Implement a function to load wall textures.
Use SDL2's texture rendering functions to render textures on the walls.
These are the minimum features required to implement a basic maze game with SDL2.
Data Modelling


USER STORY
Users want to be able to play a labyrinth game with SDL2 so they can enjoy themselves while testing their reflexes, speed and accuracy.

They need to be able to start a new game, load a saved game, or exit the game from the main menu when they launch the game. They want to be able to determine the maze's difficulty level, as well as its size and the number of obstacles, if they decide to start a new game.


They want to see a maze on the screen when the game first starts, along with a character that they can move about using the arrow keys on their keyboard. They want the character to move without pause or lag and to do it fast and smoothly. Along with a score that shows their progress through the maze, customers also want to see a timer that indicates how much longer they have to finish the maze.

They want to be able to gather coins or other incentives that will raise their score as they make their way through the maze. Also, they want to run into challenges that will slow them down or make it more difficult for them to exit the maze.

As they reach the conclusion of the maze, they should see a message congratulating them on finishing it as well as information about their final score and completion time. In order to continue playing later, they also want the option to save their game.

Throughout the game, people want to hear sound effects that correspond to their activities, such as collecting coins or striking an obstacle. Also, they like music that heightens the game's tension and difficulty.


Last but not least, they want the game to be visually appealing with top-notch animations and graphics that make it enjoyable to play and keep them interested the entire time.


